@model List<App_horarios_BackEnd.Models.BlocoHorarioView>

@{
ViewData["Title"] = "Grelha Horária";
var dias = new[] { "Segunda", "Terça", "Quarta", "Quinta", "Sexta", "Sábado" };
var intervalos = ViewBag.Intervalos as List<string>;
var blocosRenderizados = new HashSet<int>();
}

<div class="container mt-4">
    <div class="text-center mb-4">
        <h2 class="fw-bold text-title">Grelha Horária</h2>
        <p class="text-muted">Visualize os blocos horários organizados por dia da semana e hora</p>
    </div>

    <div class="d-flex justify-content-between align-items-center mb-4">
        @if (ViewBag.HorarioAnterior != null)
        {
        <a asp-action="GradeHorario" asp-route-id="@ViewBag.HorarioAnterior" class="btn btn-outline-primary">
            <i class="bi bi-arrow-left-circle"></i> Horário Anterior
        </a>
        }
        else
        {
        <div></div>
        }

        <h4 class="fw-bold mb-0">Horário Nº @ViewBag.HorarioId</h4>

        @if (ViewBag.HorarioSeguinte != null)
        {
        <a asp-action="GradeHorario" asp-route-id="@ViewBag.HorarioSeguinte" class="btn btn-outline-primary">
            Próximo Horário <i class="bi bi-arrow-right-circle"></i>
        </a>
        }
        else
        {
        <div></div>
        }
    </div>

    <div class="table-responsive shadow-sm border rounded">
        <table class="table table-bordered mb-0">
            <thead class="table-light text-center align-middle">
            <tr>
                <th style="width: 120px;">Hora</th>
                @foreach (var dia in dias)
                {
                <th>@dia</th>
                }
            </tr>
            </thead>
            <tbody>
            @foreach (var intervalo in intervalos)
            {
            var partes = intervalo.Split(" - ");
            var horaInicio = TimeSpan.Parse(partes[0]);

            <tr>
                <td class="text-center fw-semibold">@intervalo</td>
                @for (int dia = 1; dia <= 6; dia++)
                {
                var bloco = Model.FirstOrDefault(b =>
                b.DiaSemana == dia &&
                b.HoraInicio <= horaInicio && b.HoraFim > horaInicio);

                if (bloco != null)
                {
                if (!blocosRenderizados.Contains(bloco.Id))
                {
                var duracao = bloco.HoraFim - bloco.HoraInicio;
                var linhas = (int)(duracao.TotalMinutes / 30);

                <td rowspan="@linhas" class="bg-primary text-white align-top p-1">
                    <strong>@(bloco.BlocoAula.Disciplina?.Nome ?? "—")</strong><br />
                    <span class="fst-italic">
                                            @string.Join(", ", bloco.BlocoAula.BlocoAulaProfessores.Select(p => p.Professor?.Nome ?? "—"))
                                        </span><br />
                    <span>@($"{bloco.HoraInicio:hh\\:mm} - {bloco.HoraFim:hh\\:mm}")</span>
                </td>
                blocosRenderizados.Add(bloco.Id);
                }
                // else: já renderizado, não fazer nada
                }
                else
                {
                <td></td>
                }
                }
            </tr>
            }
            </tbody>
        </table>
    </div>
</div>

<style>
    tr {
        height: 50px; /* Altura fixa para cada linha */
    }
</style>
